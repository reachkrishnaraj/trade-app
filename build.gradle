plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "com.gorylenko.gradle-git-properties"
    id "org.openapi.generator"
    alias(libs.plugins.spring.boot)
    id "jhipster.docker-conventions"
    id "jhipster.code-quality-conventions"
    id "jhipster.node-gradle-conventions"
    id "org.liquibase.gradle"
    id("io.freefair.lombok") version "8.3"
    // jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "com.kraj.tradeapp"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=17
targetCompatibility=17
assert System.properties["java.specification.version"] == "17" || "18" || "19" || "20" || "21"

ext {
    springProfiles = ""
    if (project.hasProperty("tls")) {
        springProfiles += ",tls"
    }
    if (project.hasProperty("e2e")) {
        springProfiles += ",e2e"
    }
}

repositories {
    // Local maven repository is required for libraries built locally with maven like development jhipster-bom.
    // mavenLocal()
    mavenCentral()
    // jhipster-needle-gradle-repositories - JHipster will add additional repositories
}

apply plugin: 'io.spring.dependency-management'

apply from: "gradle/swagger.gradle"
apply from: "gradle/liquibase.gradle"
// jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}


idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "com.kraj.tradeapp.TradeApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx512m'
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.required = false
    testLogging.exceptionFormat "full"
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

task integrationTestReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(integrationTest)
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

tasks.withType(com.gorylenko.GenerateGitPropertiesTask).configureEach {
  outputs.doNotCacheIf("Task is always executed") { true }
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    testImplementation("com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    testRuntimeOnly("com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}") {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation "io.micrometer:micrometer-registry-prometheus-simpleclient"
    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "org.apache.commons:commons-lang3"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-security"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "com.twilio.sdk:twilio:10.6.8"
    implementation 'org.projectlombok:lombok:1.18.30' // Use the latest version
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30' // Optional for testing
    testImplementation 'org.projectlombok:lombok:1.18.30'
    modules {
        module("org.springframework.boot:spring-boot-starter-tomcat") {
            replacedBy("org.springframework.boot:spring-boot-starter-undertow", "Use Undertow instead of Tomcat")
        }
    }
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework.security:spring-security-test"
    implementation libs.jhipster.framework
    implementation libs.springdoc.openapi.starter.webmvc.api
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.security:spring-security-data"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate6"
    implementation "org.hibernate.orm:hibernate-core"
    implementation "org.hibernate.validator:hibernate-validator"
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.zaxxer:HikariCP"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime"
    testImplementation "org.testcontainers:jdbc"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:testcontainers"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.security:spring-security-messaging"
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'com.github.kshashov:spring-boot-starter-telegram:0.29'
    implementation 'org.apache.commons:commons-csv:1.13.0'

    // Google API Client
    implementation 'com.google.api-client:google-api-client:2.7.2'

    // Google OAuth Client
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.32.1'

    // Google Sheets API
    implementation 'com.google.apis:google-api-services-sheets:v4-rev614-1.18.0-rc'

    implementation 'com.google.http-client:google-http-client-jackson2:1.46.1'



    implementation 'com.opencsv:opencsv:5.7.1'
    // jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

task cleanResources(type: Delete) {
    delete "build/resources"
}


compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
