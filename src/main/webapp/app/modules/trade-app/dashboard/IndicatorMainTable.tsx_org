import React, { useState, useEffect } from 'react';
import SockJS from 'sockjs-client';
import { Storage } from 'react-jhipster';
import { Stomp } from '@stomp/stompjs';
import { Card, Form, Badge } from 'react-bootstrap';
import { TradeSignalScoreSnapshot, CandleIntervalGroupedRecord, IndicatorScoreRecord, IndicatorSubCategoryScoreRecord } from 'app/shared/model/trade-app-module';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faArrowUp, faArrowDown, faExclamationCircle, faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';

interface IndicatorMainTableProps {
  symbol: string;
  wsUrl: string;
}

interface ExpandedSections {
  [key: number]: boolean;
}

interface FilterOption {
  name: string;
  displayName: string;
}

const IndicatorMainTable: React.FC<IndicatorMainTableProps> = ({ symbol, wsUrl }) => {
  const [data, setData] = useState<SignalSnapshot | null>(null);
  const [expandedSections, setExpandedSections] = useState<ExpandedSections>({});
  const [selectedIndicator, setSelectedIndicator] = useState<string>('all');
  const [selectedSubCategory, setSelectedSubCategory] = useState<string>('all');
  const [indicatorOptions, setIndicatorOptions] = useState<FilterOption[]>([
    { name: 'all', displayName: 'All Indicators' }
  ]);
  const [subCategoryOptions, setSubCategoryOptions] = useState<FilterOption[]>([
    { name: 'all', displayName: 'All Sub-Categories' }
  ]);

  useEffect(() => {
    if (!symbol) {
      console.log('No symbol provided');
      return;
    }

    const sock = new SockJS(wsUrl);
    const stompClient = Stomp.over(sock);

    const fetchInitialData = async () => {
      try {
        const token = Storage.local.get('jhi-authenticationToken') || Storage.session.get('jhi-authenticationToken');
        const response = await window.fetch(`/api/v1/dashboard/signal-snapshot/${symbol}`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        const data = await response.json();
        setData(data);
      } catch (error) {
        console.error('Error fetching initial data:', error);
      }
    };

    fetchInitialData();

    stompClient.connect({}, () => {
      stompClient.subscribe(`/topic/signal-snapshot/${symbol}`, message => {
        const parsedData = JSON.parse(message.body);
        setData(parsedData);
      });
    });

    return () => {
      stompClient.disconnect();
    };
  }, [symbol, wsUrl]);

  useEffect(() => {
    if (!data) {
      return;
    }

    // Extract unique indicators
    const indicators: FilterOption[] = [{ name: 'all', displayName: 'All Indicators' }];
    const uniqueIndicators = new Map<string, string>();

    data.indicatorScoreRecords.forEach(indicator => {
      if (!uniqueIndicators.has(indicator.name)) {
        uniqueIndicators.set(indicator.name, indicator.displayName);
      }
    });

    uniqueIndicators.forEach((displayName, name) => {
      indicators.push({ name, displayName });
    });
    setIndicatorOptions(indicators);

    // Extract unique subcategories
    const subCategories: FilterOption[] = [{ name: 'all', displayName: 'All Sub-Categories' }];
    const uniqueSubCategories = new Map<string, string>();

    data.indicatorScoreRecords.forEach(indicator => {
      indicator.subCategoryScores.forEach(sub => {
        if (!uniqueSubCategories.has(sub.name)) {
          uniqueSubCategories.set(sub.name, sub.displayName);
        }
      });
    });

    uniqueSubCategories.forEach((displayName, name) => {
      subCategories.push({ name, displayName });
    });
    setSubCategoryOptions(subCategories);

    // Initialize expanded sections
    const initialExpanded: ExpandedSections = {};
    data.indicatorScoreRecords.forEach((_, index) => {
      initialExpanded[index] = true;
    });
    setExpandedSections(initialExpanded);
  }, [data]);

  const getScoreColor = (score: string, minScore: string, maxScore: string): string => {
    const normalizedScore = (Number(score) - Number(minScore)) / (Number(maxScore) - Number(minScore));
    if (normalizedScore < 0.4) return 'danger';
    if (normalizedScore > 0.6) return 'success';
    return 'warning';
  };

  const DirectionIcon = ({ direction }: { direction: string }) => {
    if (!direction) return <FontAwesomeIcon icon={faExclamationCircle} className="text-warning" />;
    if (direction.includes('BULL')) {
      return <FontAwesomeIcon icon={faArrowUp} className="text-success" />;
    }
    if (direction.includes('BEAR')) {
      return <FontAwesomeIcon icon={faArrowDown} className="text-danger" />;
    }
    return <FontAwesomeIcon icon={faExclamationCircle} className="text-warning" />;
  };

  const toggleSection = (index: number) => {
    setExpandedSections(prev => ({
      ...prev,
      [index]: !prev[index],
    }));
  };

  const filterIndicators = (records: IndicatorScoreRecord[] | undefined): IndicatorScoreRecord[] => {
    if (!records) return [];
    return records.filter(indicator =>
      selectedIndicator === 'all' || indicator.name === selectedIndicator
    );
  };

  const filterSubCategories = (subCategories: SubCategoryScore[] | undefined): SubCategoryScore[] => {
    if (!subCategories) return [];
    return subCategories.filter(sub =>
      selectedSubCategory === 'all' || sub.name === selectedSubCategory
    );
  };

  if (!data) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: '200px' }}>
        <div className="h4 text-muted">Loading...</div>
      </div>
    );
  }

  return (
    <div className="mb-4">
      {/* Overall Score Card with Metadata */}
      <Card className="mb-3">
        <Card.Header className="d-flex justify-content-between align-items-center">
          <div className="d-flex align-items-center gap-2">
            <span>{data.symbol || 'Unknown'}</span>
            {data.indicatorScoreRecords?.[0] && (
              <>
                <Badge bg="secondary">{data.indicatorScoreRecords[0].candleType || 'N/A'}</Badge>
                <Badge bg="info">{data.indicatorScoreRecords[0].interval || 'N/A'}</Badge>
              </>
            )}
          </div>
          <span className="text-muted small">
            {data.dateTime ? new Date(data.dateTime).toLocaleString() : 'N/A'}
          </span>
        </Card.Header>
        <Card.Body>
          <div className="row">
            <div className="col-md-4">
              <div className="p-3 bg-light rounded">
                <h5>Overall Score</h5>
                <div className={`h3 text-${getScoreColor(data.score, data.minScore, data.maxScore)}`}>
                  {data.score || 'N/A'}
                </div>
                <div className="text-muted small">
                  Range: {data.minScore || '0'} to {data.maxScore || '0'}
                </div>
              </div>
            </div>
            <div className="col-md-4">
              <div className="p-3 bg-light rounded">
                <h5>Direction</h5>
                <div className="d-flex align-items-center justify-content-center gap-2">
                  <DirectionIcon direction={data.direction} />
                  <span className="h4 mb-0">{data.direction || 'N/A'}</span>
                </div>
              </div>
            </div>
          </div>

          {/* Filters */}
          <div className="row mt-4">
            <div className="col-md-6">
              <Form.Group>
                <Form.Label>Filter by Indicator</Form.Label>
                <Form.Select
                  value={selectedIndicator}
                  onChange={(e) => setSelectedIndicator(e.target.value)}
                >
                  {indicatorOptions.map((option) => (
                    <option key={option.name} value={option.name}>
                      {option.displayName}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
            </div>
            <div className="col-md-6">
              <Form.Group>
                <Form.Label>Filter by SubCategory</Form.Label>
                <Form.Select
                  value={selectedSubCategory}
                  onChange={(e) => setSelectedSubCategory(e.target.value)}
                >
                  {subCategoryOptions.map((option) => (
                    <option key={option.name} value={option.name}>
                      {option.displayName}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
            </div>
          </div>
        </Card.Body>
      </Card>

      {/* Indicator Scores */}
      {filterIndicators(data.indicatorScoreRecords).map((indicator, index) => (
        <Card key={index} className="mb-3">
          <Card.Header
            className="cursor-pointer"
            onClick={() => toggleSection(index)}
            style={{ cursor: 'pointer' }}
          >
            <div className="d-flex justify-content-between align-items-center">
              <h5 className="mb-0">{indicator.displayName || indicator.name}</h5>
              <FontAwesomeIcon icon={expandedSections[index] ? faChevronUp : faChevronDown} />
            </div>
          </Card.Header>
          {expandedSections[index] && (
            <Card.Body>
              {/* Indicator Overview */}
              <div className="row bg-light p-3 rounded mb-3">
                <div className="col-md-3">
                  <div className="mb-2">Score</div>
                  <div className={`h4 text-${getScoreColor(indicator.score, indicator.minScore, indicator.maxScore)}`}>
                    {indicator.score || 'N/A'}
                  </div>
                </div>
                <div className="col-md-3">
                  <div className="mb-2">Direction</div>
                  <div className="d-flex align-items-center gap-2">
                    <DirectionIcon direction={indicator.direction} />
                    <span>{indicator.direction || 'N/A'}</span>
                  </div>
                </div>
                <div className="col-md-3">
                  <div className="mb-2">Message</div>
                  <div>{indicator.lastMsg || 'No message'}</div>
                </div>
                <div className="col-md-3">
                  <div className="mb-2">Interval</div>
                  <div>{indicator.interval || 'N/A'}</div>
                </div>
              </div>

              {/* SubCategory Scores */}
              <div>
                {filterSubCategories(indicator.subCategoryScores).map((subScore, subIndex) => (
                  <div key={subIndex} className="py-3 border-bottom">
                    <div className="row">
                      <div className="col-md-3">
                        <div className="fw-bold mb-1">{subScore.displayName || subScore.name}</div>
                        <div className={`h5 text-${getScoreColor(subScore.score, subScore.minScore, subScore.maxScore)}`}>
                          {subScore.score || 'N/A'}
                        </div>
                      </div>
                      <div className="col-md-3">
                        <div className="mb-1">Direction</div>
                        <div className="d-flex align-items-center gap-2">
                          <DirectionIcon direction={subScore.direction} />
                          <span>{subScore.direction || 'N/A'}</span>
                        </div>
                      </div>
                      <div className="col-md-6">
                        <div>{subScore.lastMsg || 'No message'}</div>
                        <div className="text-muted small">
                          {subScore.lastMsgDateTime ? new Date(subScore.lastMsgDateTime).toLocaleString() : 'N/A'}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </Card.Body>
          )}
        </Card>
      ))}
    </div>
  );
};

export default IndicatorMainTable;
